// method to get deeply nested map values
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// function to return a breakpoint value from the breakpoint map
// remember as "griddle breakpoint" or "get breakpoint"
// -----------------------------------------------------------------------------
@function bp($bp) {
  @if map-has-key($g-breakpoints, #{$bp}) {
    @return map-deep-get($g-breakpoints, #{$bp}, 'width');
  }
  @warn "The breakpoint key '#{$bp}' is not in the map ’$g-breakpoints’";
  @return null;
};

// creates a media query above a given breakpoint
// -----------------------------------------------------------------------------
@mixin above($min) {
  @if map-has-key($g-breakpoints, #{$min}) {
    @media (min-width: map-deep-get($g-breakpoints, #{$min}, 'width')) {
      @content;
    }
  }
  @else {
    @warn "The breakpoint key '#{$min}' is not in the map ’$g-breakpoints’";
  }
};

// creates a media query below a given breakpoint
// -----------------------------------------------------------------------------
@mixin below($max) {
  @if map-has-key($g-breakpoints, #{$max}) {
    @media (max-width: map-deep-get($g-breakpoints, #{$max}, 'width') - 1) {
      @content;
    }
  }
  @else {
    @warn "The breakpoint key '#{$max}' is not in the map ’$g-breakpoints’";
  }
};

// creates a media query between two breakpoints
// -----------------------------------------------------------------------------
@mixin between($min, $max) {
  @if map-has-key($g-breakpoints, #{$min}) {
     @if map-has-key($g-breakpoints, #{$max}) {
       @media (min-width: map-deep-get($g-breakpoints, #{$min}, 'width')) and (max-width: map-deep-get($g-breakpoints, #{$max}, 'width') - 1) {
         @content;
       }
     }
     @else {
      @warn "The breakpoint key '#{$max}' is not in the map ’$g-breakpoints’";
     }
  }
  @else {
    @warn "The breakpoint key '#{$min}' is not in the map ’$g-breakpoints’";
  }
};

// Creates styles for a root element contained space
// -----------------------------------------------------------------------------
@mixin container () {
  @each $bp, $bp-data in $g-breakpoints {
    @if $bp == "base" {
      margin-left: map-deep-get($g-breakpoints, #{$bp}, 'inset');
      margin-right: map-deep-get($g-breakpoints, #{$bp}, 'inset');
      max-width: $g-max-body-width;
    } @else {
      @media (min-width: bp(#{$bp})) {
        margin-left: map-deep-get($g-breakpoints, #{$bp}, 'inset');
        margin-right: map-deep-get($g-breakpoints, #{$bp}, 'inset');
      }
    }
  }
}

// Creates styles for the griddle visual overlay
// -----------------------------------------------------------------------------
@mixin overlay () {
  @each $bp, $bp-data in $g-breakpoints {
    @if $bp == "base" {
      display: grid;
      grid-template-columns: $g-column-template;
      grid-column-gap: $g-column-gap;
      pointer-events: none;
      z-index: 110;
      position: fixed;
      height: 100%;
      top: 0;
      bottom: 0;
      right: map-deep-get($g-breakpoints, #{$bp}, 'inset');
      left: map-deep-get($g-breakpoints, #{$bp}, 'inset');
    } @else {
      @media (min-width: bp(#{$bp})) {
        @if map-deep-get($g-breakpoints, #{$bp}, 'inset') == auto {
          left: 50%;
          right: auto;
          transform: translateX($g-max-body-width / -2);
          width: 100%;
          max-width: $g-max-body-width;
        } @else {
          left: map-deep-get($g-breakpoints, #{$bp}, 'inset');
          right: map-deep-get($g-breakpoints, #{$bp}, 'inset');
        }
      }
    }
  }
}

// Function to create a percentage width spanning n columns.
// -----------------------------------------------------------------------------
@function span($columns, $extra_gutters: 0, $context: 0) {
  $gutters: 0;

  @if $columns == 0 {
    $gutters: $extra_gutters;
  } @else {
    $gutters: $extra_gutters + ($columns - 1);
  }

  @if $context != 0{
    @return ((($columns * $g-column) + ($gutters * $g-gutter)) / $context) * 100%;
  } @else {
    @return (($columns * $g-column) + ($gutters * $g-gutter));
  }
}

// Creates a decimal between 0-1 that defines a span of columns
// -----------------------------------------------------------------------------
@function span-decimal($columns, $extra_gutters: 0, $context: 0) {
  $gutters: 0;

  @if $columns == 0 {
    $gutters: $extra_gutters;
  } @else {
    $gutters: $extra_gutters + ($columns - 1);
  }

  @if $context != 0{
    @return ((($columns * $g-column-decimal) + ($gutters * $g-gutter-decimal)) / $context);
  } @else {
    @return (($columns * $g-column-decimal) + ($gutters * $g-gutter-decimal));
  }
}
